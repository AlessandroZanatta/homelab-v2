---
apiVersion: v1
kind: ConfigMap
metadata:
  name: garage-conf
  namespace: backups
data:
  garage.toml: |
    replication_factor = 1
    consistency_mode = "consistent"
    db_engine = "lmdb"

    metadata_dir = "/var/lib/garage/meta"
    data_dir = "/var/lib/garage/data"
    metadata_snapshots_dir = "/var/lib/garage/snapshots"
    metadata_auto_snapshot_interval = "6h"
    # metadata_fsync = true
    # data_fsync = true
    use_local_tz = true

    rpc_bind_addr = "0.0.0.0:3901"
    bootstrap_peers = []

    [s3_api]
    api_bind_addr = "0.0.0.0:3900"
    s3_region = "default"
    root_domain = ".s3.backups.kalexlab.xyz"

    # [s3_web]
    # bind_addr = "0.0.0.0:3902"
    # root_domain = ".web.backups.kalexlab.xyz"

    [admin]
    api_bind_addr = "0.0.0.0:3903"
    metrics_require_token = false

  setup.py: |
    import os

    import garage_admin_sdk
    import httpx
    from garage_admin_sdk import *

    GARAGE_HOST = "http://garage.backups.svc.cluster.local:3903"
    GARAGE_ADMIN_TOKEN = os.getenv("GARAGE_ADMIN_TOKEN")

    KEY_NAME = "default"
    ACCESS_KEY = os.getenv("ACCESS_KEY")
    SECRET_KEY = os.getenv("SECRET_KEY")
    buckets = ["cnpg", "velero", "longhorn", "restic"]

    configuration = garage_admin_sdk.Configuration(
        host=GARAGE_HOST,
        access_token=GARAGE_ADMIN_TOKEN,
    )

    api_client = garage_admin_sdk.ApiClient(configuration)

    cluster_api = garage_admin_sdk.ClusterApi(api_client)
    layout_api = garage_admin_sdk.ClusterLayoutApi(api_client)
    bucket_api = garage_admin_sdk.BucketApi(api_client)
    key_api = garage_admin_sdk.AccessKeyApi(api_client)
    permission_api = garage_admin_sdk.PermissionApi(api_client)

    node_id = cluster_api.get_cluster_status().nodes[0].id


    def update_layout():
        # Get next layout version
        new_version = 0
        try:
            current_layout = layout_api.get_cluster_layout()
        except:
            new_version = 1
        else:
            new_version = current_layout.version + 1

        # API method on client is incorrect, should not take the remove
        # parameter in NodeChangeRole list for this endpoint
        # Thus, we need to call it manually
        httpx.post(
            f"{GARAGE_HOST}/v2/UpdateClusterLayout",
            headers={
                "Authorization": f"Bearer {GARAGE_ADMIN_TOKEN}",
                "Content-Type": "application/json",
            },
            json={
                "roles": [
                    {"id": node_id, "capacity": 1000000000000, "zone": "dc1", "tags": []}
                ]
            },
        ).raise_for_status()

        # Apply new layout
        layout_api.apply_cluster_layout(
            apply_cluster_layout_request=ApplyClusterLayoutRequest(version=new_version)
        )
        print("Updated layout successfully!")


    def create_buckets_if_not_exist():
        current_buckets_response = bucket_api.list_buckets()
        current_buckets = [b.global_aliases for b in current_buckets_response]

        for bucket in buckets:
            if not any(bucket in sublist for sublist in current_buckets):
                bucket_api.create_bucket(
                    create_bucket_request=CreateBucketRequest(globalAlias=bucket)
                )
                print(f"Created bucket {bucket}!")


    def create_key_if_not_exist():
        current_keys = key_api.list_keys()

        if len(current_keys) == 0:
            key_api.import_key(
                import_key_request=ImportKeyRequest(
                    name=KEY_NAME, accessKeyId=ACCESS_KEY, secretAccessKey=SECRET_KEY
                )
            )
            print(f"Imported {KEY_NAME} key!")


    def set_permissions_on_key():
        current_buckets_response = bucket_api.list_buckets()
        current_buckets = [b.id for b in current_buckets_response]

        for bucket in current_buckets:
            permission_api.allow_bucket_key(
                BucketKeyPermChangeRequest(
                    accessKeyId=ACCESS_KEY,
                    bucketId=bucket,
                    permissions=ApiBucketKeyPerm(owner=True, read=True, write=True),
                )
            )
            print(f"Updated permissions on bucket {bucket} for {KEY_NAME} key!")


    if __name__ == "__main__":
        update_layout()
        create_buckets_if_not_exist()
        create_key_if_not_exist()
        set_permissions_on_key()
