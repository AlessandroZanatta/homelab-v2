---
apiVersion: v1
kind: Service
metadata:
  namespace: immich
  name: database
  labels:
    kalexlab.xyz/app: immich
    kalexlab.xyz/component: database
spec:
  type: ClusterIP
  ports:
    - name: postgres
      port: 5432
      protocol: TCP
      targetPort: 5432
  selector:
    kalexlab.xyz/app: immich
    kalexlab.xyz/component: database
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: immich
  name: database
  labels:
    kalexlab.xyz/app: immich
    kalexlab.xyz/component: database
spec:
  replicas: 1
  serviceName: database
  selector:
    matchLabels:
      kalexlab.xyz/app: immich
      kalexlab.xyz/component: database
  updateStrategy:
    type: RollingUpdate
  minReadySeconds: 5
  template:
    metadata:
      labels:
        kalexlab.xyz/app: immich
        kalexlab.xyz/component: database
    spec:
      restartPolicy: Always
      containers:
        - name: database
          image: "docker.io/tensorchord/pgvecto-rs:pg14-v0.2.0"
          imagePullPolicy: Always
          args:
            [
              "postgres",
              "-c",
              "shared_preload_libraries=vectors.so",
              "-c",
              'search_path="$user", public, vectors',
              "-c",
              "logging_collector=on",
              "-c",
              "max_wal_size=2GB",
              "-c",
              "shared_buffers=512MB",
              "-c",
              "wal_compression=on",
            ]

          ports:
            - name: postgres
              containerPort: 5432
              protocol: TCP

          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: immich-secrets
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: immich-secrets
                  key: POSTGRES_PASSWORD
            - name: POSTGRES_DB
              value: "immich"
            - name: POSTGRES_INITDB_ARGS
              value: "--data-checksums"
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata

          livenessProbe:
            exec:
              command:
                ["sh", "-c", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
            periodSeconds: 30
          readinessProbe:
            exec:
              command:
                ["sh", "-c", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
            periodSeconds: 10
            failureThreshold: 3

          resources:
            requests:
              memory: 150Mi
              cpu: 5m
            limits:
              memory: 500Mi
              cpu: 100m

          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true

          volumeMounts:
            - mountPath: /tmp
              name: tmp
            - mountPath: /var/run/postgresql
              name: postgres-run
            - mountPath: /var/lib/postgresql/data
              name: immich-db-pvc
              subPath: pgdata

      enableServiceLinks: false
      automountServiceAccountToken: false

      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: "OnRootMismatch"

      volumes:
        - name: tmp
          emptyDir:
            sizeLimit: 1Gi
        - name: postgres-run
          emptyDir:
            sizeLimit: 1Gi

  volumeClaimTemplates:
    - metadata:
        name: immich-db-pvc
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: longhorn
        resources:
          requests:
            storage: 1Gi
