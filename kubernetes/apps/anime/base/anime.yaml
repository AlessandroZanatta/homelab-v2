---
apiVersion: v1
kind: Service
metadata:
  namespace: anime
  name: app
  labels:
    kalexlab.xyz/app: anime
    kalexlab.xyz/component: app
spec:
  type: ClusterIP
  ports:
    - name: anime
      port: 9000
      protocol: TCP
  selector:
    kalexlab.xyz/app: anime
    kalexlab.xyz/component: app
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: anime
  name: app
  labels:
    kalexlab.xyz/app: anime
    kalexlab.xyz/component: app
spec:
  serviceName: anime
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      kalexlab.xyz/app: anime
      kalexlab.xyz/component: app
  minReadySeconds: 5
  template:
    metadata:
      labels:
        kalexlab.xyz/app: anime
        kalexlab.xyz/component: app
        egress.kalexlab.xyz/policy: vpn
    spec:
      restartPolicy: Always

      imagePullSecrets:
        - name: registry-credentials

      containers:
        - name: anime-backend
          image: "registry.kalexlab.xyz/anime/backend:latest"
          imagePullPolicy: Always

          # securityContext:
          #   readOnlyRootFilesystem: true
          #   runAsNonRoot: true
          #   runAsUser: 1000
          #   runAsGroup: 1000
          #   allowPrivilegeEscalation: false

          ports:
            - containerPort: 8080
              protocol: TCP

          # TODO
          # resources:
          #   requests:
          #     memory: 150Mi
          #     cpu: 20m
          #   limits:
          #     memory: 500Mi
          #     cpu: 1000m

          readinessProbe:
            httpGet:
              path: /health
              port: 8080
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            failureThreshold: 3
            periodSeconds: 30

          securityContext:
            # Running python and an headless in a readonly fs is too painful
            # readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false

          volumeMounts:
            - mountPath: /app/config.yml
              name: anime-conf
              subPath: config.yml
            - mountPath: /data/anime
              name: anime-data-pvc
            - mountPath: /data/cache
              name: anime-cache-pvc
            - mountPath: /etc/secrets/db/dsn
              name: cluster-app
              subPath: uri

        - name: anime-frontend
          image: "registry.kalexlab.xyz/anime/frontend:latest"
          imagePullPolicy: Always

          ports:
            - containerPort: 9000
              protocol: TCP

          # TODO
          # resources:
          #   requests:
          #     memory: 150Mi
          #     cpu: 20m
          #   limits:
          #     memory: 500Mi
          #     cpu: 1000m

          readinessProbe:
            httpGet:
              path: /
              port: 9000
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /
              port: 9000
            failureThreshold: 3
            periodSeconds: 30

          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false

          volumeMounts:
            - mountPath: /etc/nginx/nginx.conf
              name: anime-conf
              subPath: nginx.conf
            - mountPath: /var/cache/nginx
              name: nginx-cache
            - mountPath: /var/run
              name: run

      enableServiceLinks: false
      automountServiceAccountToken: false

      securityContext:
        fsGroup: 1000
        fsGroupChangePolicy: "OnRootMismatch"

      volumes:
        - name: tmp
          emptyDir:
            sizeLimit: 1Gi
        - name: run
          emptyDir:
            sizeLimit: 1Gi
        - name: nginx-cache
          emptyDir:
            sizeLimit: 1Gi
        - name: anime-conf
          configMap:
            name: anime-conf
        - name: cluster-app
          secret:
            secretName: cluster-app

  volumeClaimTemplates:
    - metadata:
        name: anime-data-pvc
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: longhorn
        resources:
          requests:
            storage: 150Gi
    - metadata:
        name: anime-cache-pvc
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: longhorn
        resources:
          requests:
            storage: 500Mi
