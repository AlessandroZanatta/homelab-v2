---
global:
  leaderElection:
    # Override the namespace used for the leader election lease.
    namespace: cert-manager

prometheus:
  # Enable Prometheus monitoring for the cert-manager controller to use with the
  # Prometheus Operator
  enabled: true

  servicemonitor:
    # Create a ServiceMonitor to add cert-manager to Prometheus.
    enabled: true

extraObjects:
  # Extra objects needed to create a cluster issuer using the porkbun webhook for cert-manager
  - |
    apiVersion: cert-manager.io/v1
    kind: ClusterIssuer
    metadata:
      name: letsencrypt
      namespace: "{{ .Values.global.leaderElection.namespace }}"
    spec:
      acme:
        server: "https://acme-v02.api.letsencrypt.org/directory" # "https://acme-staging-v02.api.letsencrypt.org/directory"
        email: alessandro.zanatta.lav@gmail.com
        privateKeySecretRef:
          name: letsencrypt-clusterissuer
        solvers:
          - selector:
              dnsZones:
                - kalexlab.xyz
            dns01:
              webhook:
                groupName: acme.kalexlab.xyz
                solverName: porkbun
                config:
                  apiKeySecretRef:
                    name: porkbun-key
                    key: api-key
                  secretKeySecretRef:
                    name: porkbun-key
                    key: secret-key
  - |
    apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    metadata:
      name: porkbun-key:reader
      namespace: "{{ .Values.global.leaderElection.namespace }}"
    rules:
      - apiGroups: [""]
        resources: ["secrets"]
        resourceNames: ["porkbun-key"]
        verbs: ["get"]
  - |
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      name: porkbun-webhook:key-reader
      namespace: "{{ .Values.global.leaderElection.namespace }}"
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: Role
      name: porkbun-key:reader
    subjects:
      - apiGroup: ""
        kind: ServiceAccount
        name: porkbun-webhook
  - |
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      name: list-prioritylevelconfigurations
    rules:
      - apiGroups: ["flowcontrol.apiserver.k8s.io"]
        resources: ["flowschemas", "prioritylevelconfigurations"]
        verbs: ["list", "get", "watch"]
  - |
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: list-prioritylevelconfigurations-binding
    subjects:
      - kind: ServiceAccount
        name: porkbun-webhook
        namespace: "{{ .Values.global.leaderElection.namespace }}"
    roleRef:
      kind: ClusterRole
      name: list-prioritylevelconfigurations
      apiGroup: rbac.authorization.k8s.io
  - |
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      name: system-aggregator-role
    rules:
      - apiGroups: ["acme.kalexlab.xyz"]
        resources: ["porkbun"]
        verbs: ["create", "get", "list", "watch"]
  - |
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: system-aggregator-rolebinding
    subjects:
      - kind: User
        name: system:aggregator
        apiGroup: rbac.authorization.k8s.io
    roleRef:
      kind: ClusterRole
      name: system-aggregator-role
      apiGroup: rbac.authorization.k8s.io
  - |
    apiVersion: v1
    kind: Secret
    metadata:
      name: porkbun-key
      namespace: "{{ .Values.global.leaderElection.namespace }}"
    data:
      api-key: "{{ .Values.porkbun.apiKey | b64enc }}"
      secret-key: "{{ .Values.porkbun.secretKey | b64enc }}"
