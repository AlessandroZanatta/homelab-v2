---
- name: Create admin config directory
  file:
    path: "{{ k8s_kube_admin_path }}"
    state: directory
    mode: "0700"
    owner: "root"
    group: "root"

# TODO: idempotency
- name: Generate a kubeconfig file for the admin user (set-cluster)
  shell: |
    kubectl config set-cluster kubernetes \
      --certificate-authority={{ k8s_keys_path }}/ca-apiserver.pem \
      --embed-certs=true \
      --server=https://{{ k8s_kube_apiserver_endpoint_host }}:{{ k8s_kube_apiserver_endpoint_port }} \
      --kubeconfig={{ k8s_kube_admin_path }}/admin.kubeconfig

- name: Generate a kubeconfig file for the admin user (set-credentials)
  shell: |
    kubectl config set-credentials admin \
      --client-certificate={{ k8s_keys_path }}/apiserver-admin.pem \
      --client-key={{ k8s_keys_path }}/apiserver-admin-key.pem \
      --embed-certs=true \
      --kubeconfig={{ k8s_kube_admin_path }}/admin.kubeconfig

- name: Generate a kubeconfig file for the admin user (set-context)
  shell: |
    kubectl config set-context default \
      --cluster=kubernetes \
      --user=admin \
      --kubeconfig={{ k8s_kube_admin_path }}/admin.kubeconfig

- name: Set use-context
  shell: |
    kubectl config use-context default \
      --kubeconfig={{ k8s_kube_admin_path }}/admin.kubeconfig

- name: Set file permissions
  file:
    path: "{{ k8s_kube_admin_path }}/admin.kubeconfig"
    owner: "root"
    group: "root"
    mode: "0640"

- name: Copy file back to host
  fetch:
    src: "{{ k8s_kube_admin_path }}/admin.kubeconfig"
    dest: "{{ k8s_output_path }}/admin.kubeconfig"
    mode: "0400"
    flat: true
